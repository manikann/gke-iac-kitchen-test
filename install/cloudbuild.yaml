substitutions:
  _WORKING_DIR: .
  _HELM_VERSION: v2.13.1
  _CLOUDSDK_COMPUTE_ZONE: us-central1-c
  _CLOUDSDK_CONTAINER_CLUSTER: artifactory-gke
timeout: 1800s
tags: ['artifactory']
steps:
  - id: 'prepare-for-install'
    name: gcr.io/${PROJECT_ID}/cloud-builders-community-helm:${_HELM_VERSION}
    dir: ${_WORKING_DIR}
    args:
      - 'bash'
      - '-c'
      - |
        set -xeo pipefail

        curl -ksSLf https://ipinfo.io/ip

        gsutil cp gs://${PROJECT_ID}-artifactory-config/* .

        kubectl create configmap bootstrap-config \
          --from-file=artifactory.config.import.xml --dry-run -o yaml | kubectl apply -f -
    env:
      - 'TILLERLESS=true'
      - 'GCLOUD_PROJECT=${PROJECT_ID}'
      - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'

  - id: 'mission-control'
    name: gcr.io/${PROJECT_ID}/cloud-builders-community-helm:${_HELM_VERSION}
    dir: ${_WORKING_DIR}
    args:
      - 'bash'
      - '-c'
      - |
        helm upgrade mc ./mission-control \
            --force \
            --install \
            --debug \
            --timeout 900 \
            --set missionControl.mcKey=$(cat master.key) \
            --set postgresql.imageTag=11.2-alpine \
            --set postgresql.persistence.size=10Gi \
            --set postgresql.postgresPassword=$(cat db.password) \
            --set postgresql.db.jfmcPassword=$(cat db.password) \
            --set postgresql.db.jfisPassword=$(cat db.password) \
            --set postgresql.db.jfscPassword=$(cat db.password) \
            --set postgresql.db.jfexPassword=$(cat db.password) \
            --set elasticsearch.enabled=false \
            --set elasticsearch.persistence.enabled=false \
            --set missionControl.service.type=NodePort \
            --set missionControl.persistence.size=10Gi
    env:
      - 'TILLERLESS=true'
      - 'GCLOUD_PROJECT=${PROJECT_ID}'
      - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'


#  - id: 'artiractory-pvc'
#    name: gcr.io/${PROJECT_ID}/cloud-builders-community-helm:${_HELM_VERSION}
#    dir: ${_WORKING_DIR}
#    args:
#      - 'bash'
#      - '-c'
#      - |
#        helm upgrade pvc ./artifactory \
#            --force \
#            --install \
#            --debug \
#            --timeout 900 \
#            --version  ${_CHART_VERSION} \
#            --values values-override.yaml \
#            --set artifactory.nodePort=30672 \
#            --set artifactory.persistence.type=file-system \
#            --set artifactory.license.secret=artifactory-license,artifactory.license.dataKey=artifactory.lic \
#            --set artifactory.configMapName=bootstrap-config \
#            --set artifactory.image.repository=gcr.io/${PROJECT_ID}/artifactory-pro-fuse \
#            --set artifactory.masterKey=$(cat master.key) \
#            --set postgresql.postgresPassword=$(cat db.password) \
#            --set artifactory.accessAdmin.password=$(cat access.password)
#    env:
#      - 'TILLERLESS=true'
#      - 'GCLOUD_PROJECT=${PROJECT_ID}'
#      - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
#      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
#
#  - id: 'artiractory-fulldb'
#    name: gcr.io/${PROJECT_ID}/cloud-builders-community-helm:${_HELM_VERSION}
#    dir: ${_WORKING_DIR}
#    args:
#      - 'bash'
#      - '-c'
#      - |
#        helm upgrade fulldb ./artifactory \
#            --force \
#            --install \
#            --debug \
#            --timeout 900 \
#            --version  ${_CHART_VERSION} \
#            --values values-override.yaml \
#            --set artifactory.nodePort=30673 \
#            --set artifactory.persistence.type=full-db \
#            --set artifactory.license.secret=artifactory-license,artifactory.license.dataKey=artifactory.lic \
#            --set artifactory.configMapName=bootstrap-config \
#            --set artifactory.image.repository=gcr.io/${PROJECT_ID}/artifactory-pro-fuse \
#            --set artifactory.masterKey=$(cat master.key) \
#            --set postgresql.postgresPassword=$(cat db.password) \
#            --set artifactory.accessAdmin.password=$(cat access.password)
#    env:
#      - 'TILLERLESS=true'
#      - 'GCLOUD_PROJECT=${PROJECT_ID}'
#      - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
#      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
#
#  - id: 'artiractory-gcs'
#    name: gcr.io/${PROJECT_ID}/cloud-builders-community-helm:${_HELM_VERSION}
#    dir: ${_WORKING_DIR}
#    args:
#      - 'bash'
#      - '-c'
#      - |
#        helm upgrade gcs ./artifactory \
#            --force \
#            --install \
#            --debug \
#            --timeout 900 \
#            --version  ${_CHART_VERSION} \
#            --values values-override.yaml \
#            --set artifactory.nodePort=30674 \
#            --set artifactory.persistence.type=google-storage \
#            --set artifactory.persistence.googleStorage.identity=$(cat gcs-api.key) \
#            --set artifactory.persistence.googleStorage.credential=$(cat gcs-api.password) \
#            --set artifactory.persistence.googleStorage.bucketName=${PROJECT_ID}-artifactory-gcsstore \
#            --set artifactory.license.secret=artifactory-license,artifactory.license.dataKey=artifactory.lic \
#            --set artifactory.configMapName=bootstrap-config \
#            --set artifactory.image.repository=gcr.io/${PROJECT_ID}/artifactory-pro-fuse \
#            --set artifactory.masterKey=$(cat master.key) \
#            --set postgresql.postgresPassword=$(cat db.password) \
#            --set artifactory.accessAdmin.password=$(cat access.password)
#    env:
#      - 'TILLERLESS=true'
#      - 'GCLOUD_PROJECT=${PROJECT_ID}'
#      - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
#      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
